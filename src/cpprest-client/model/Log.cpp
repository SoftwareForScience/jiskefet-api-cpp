/**
 * Jiskefet
 * Running with /api base path
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.4.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Log.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Log::Log()
{
    m_LogId = 0L;
    m_Origin = utility::conversions::to_string_t("");
    m_CreationTime = utility::datetime();
    m_Title = utility::conversions::to_string_t("");
    m_Body = utility::conversions::to_string_t("");
    m_SubsystemFkSubsystemId = 0L;
    m_SubsystemFkSubsystemIdIsSet = false;
    m_AnnouncementValidUntil = utility::datetime();
    m_AnnouncementValidUntilIsSet = false;
    m_CommentFkParentLogId = 0L;
    m_CommentFkParentLogIdIsSet = false;
    m_CommentFkRootLogId = 0L;
    m_CommentFkRootLogIdIsSet = false;
}

Log::~Log()
{
}

void Log::validate()
{
    // TODO: implement validation
}

web::json::value Log::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("logId")] = ModelBase::toJson(m_LogId);
    val[utility::conversions::to_string_t("origin")] = ModelBase::toJson(m_Origin);
    val[utility::conversions::to_string_t("creationTime")] = ModelBase::toJson(m_CreationTime);
    val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    if(m_SubsystemFkSubsystemIdIsSet)
    {
        val[utility::conversions::to_string_t("subsystemFkSubsystemId")] = ModelBase::toJson(m_SubsystemFkSubsystemId);
    }
    if(m_AnnouncementValidUntilIsSet)
    {
        val[utility::conversions::to_string_t("announcementValidUntil")] = ModelBase::toJson(m_AnnouncementValidUntil);
    }
    if(m_CommentFkParentLogIdIsSet)
    {
        val[utility::conversions::to_string_t("commentFkParentLogId")] = ModelBase::toJson(m_CommentFkParentLogId);
    }
    if(m_CommentFkRootLogIdIsSet)
    {
        val[utility::conversions::to_string_t("commentFkRootLogId")] = ModelBase::toJson(m_CommentFkRootLogId);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Runs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("runs")] = web::json::value::array(jsonArray);
    }

    return val;
}

void Log::fromJson(web::json::value& val)
{
    setLogId(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("logId")]));
    setOrigin(ModelBase::stringFromJson(val[utility::conversions::to_string_t("origin")]));
    setCreationTime
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("creationTime")]));
    setTitle(ModelBase::stringFromJson(val[utility::conversions::to_string_t("title")]));
    setBody(ModelBase::stringFromJson(val[utility::conversions::to_string_t("body")]));
    if(val.has_field(utility::conversions::to_string_t("subsystemFkSubsystemId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("subsystemFkSubsystemId")];
        if(!fieldValue.is_null())
        {
            setSubsystemFkSubsystemId(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("announcementValidUntil")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("announcementValidUntil")];
        if(!fieldValue.is_null())
        {
            setAnnouncementValidUntil(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("commentFkParentLogId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("commentFkParentLogId")];
        if(!fieldValue.is_null())
        {
            setCommentFkParentLogId(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("commentFkRootLogId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("commentFkRootLogId")];
        if(!fieldValue.is_null())
        {
            setCommentFkRootLogId(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    {
        m_Runs.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("runs")].as_array() )
        {
            m_Runs.push_back(ModelBase::stringFromJson(item));
        }
    }
}

void Log::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logId"), m_LogId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin"), m_Origin));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creationTime"), m_CreationTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    if(m_SubsystemFkSubsystemIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subsystemFkSubsystemId"), m_SubsystemFkSubsystemId));
    }
    if(m_AnnouncementValidUntilIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("announcementValidUntil"), m_AnnouncementValidUntil));
        
    }
    if(m_CommentFkParentLogIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("commentFkParentLogId"), m_CommentFkParentLogId));
    }
    if(m_CommentFkRootLogIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("commentFkRootLogId"), m_CommentFkRootLogId));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Runs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runs"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void Log::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setLogId(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("logId"))));
    setOrigin(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin"))));
    setCreationTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("creationTime"))));
    setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    setBody(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("body"))));
    if(multipart->hasContent(utility::conversions::to_string_t("subsystemFkSubsystemId")))
    {
        setSubsystemFkSubsystemId(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("subsystemFkSubsystemId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("announcementValidUntil")))
    {
        setAnnouncementValidUntil(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("announcementValidUntil"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("commentFkParentLogId")))
    {
        setCommentFkParentLogId(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("commentFkParentLogId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("commentFkRootLogId")))
    {
        setCommentFkRootLogId(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("commentFkRootLogId"))));
    }
    {
        m_Runs.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("runs"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Runs.push_back(ModelBase::stringFromJson(item));
        }
    }
}

int64_t Log::getLogId() const
{
    return m_LogId;
}


void Log::setLogId(int64_t value)
{
    m_LogId = value;
    
}
utility::string_t Log::getOrigin() const
{
    return m_Origin;
}


void Log::setOrigin(utility::string_t value)
{
    m_Origin = value;
    
}
utility::datetime Log::getCreationTime() const
{
    return m_CreationTime;
}


void Log::setCreationTime(utility::datetime value)
{
    m_CreationTime = value;
    
}
utility::string_t Log::getTitle() const
{
    return m_Title;
}


void Log::setTitle(utility::string_t value)
{
    m_Title = value;
    
}
utility::string_t Log::getBody() const
{
    return m_Body;
}


void Log::setBody(utility::string_t value)
{
    m_Body = value;
    
}
int64_t Log::getSubsystemFkSubsystemId() const
{
    return m_SubsystemFkSubsystemId;
}


void Log::setSubsystemFkSubsystemId(int64_t value)
{
    m_SubsystemFkSubsystemId = value;
    m_SubsystemFkSubsystemIdIsSet = true;
}
bool Log::subsystemFkSubsystemIdIsSet() const
{
    return m_SubsystemFkSubsystemIdIsSet;
}

void Log::unsetSubsystemFkSubsystemId()
{
    m_SubsystemFkSubsystemIdIsSet = false;
}

utility::datetime Log::getAnnouncementValidUntil() const
{
    return m_AnnouncementValidUntil;
}


void Log::setAnnouncementValidUntil(utility::datetime value)
{
    m_AnnouncementValidUntil = value;
    m_AnnouncementValidUntilIsSet = true;
}
bool Log::announcementValidUntilIsSet() const
{
    return m_AnnouncementValidUntilIsSet;
}

void Log::unsetAnnouncementValidUntil()
{
    m_AnnouncementValidUntilIsSet = false;
}

int64_t Log::getCommentFkParentLogId() const
{
    return m_CommentFkParentLogId;
}


void Log::setCommentFkParentLogId(int64_t value)
{
    m_CommentFkParentLogId = value;
    m_CommentFkParentLogIdIsSet = true;
}
bool Log::commentFkParentLogIdIsSet() const
{
    return m_CommentFkParentLogIdIsSet;
}

void Log::unsetCommentFkParentLogId()
{
    m_CommentFkParentLogIdIsSet = false;
}

int64_t Log::getCommentFkRootLogId() const
{
    return m_CommentFkRootLogId;
}


void Log::setCommentFkRootLogId(int64_t value)
{
    m_CommentFkRootLogId = value;
    m_CommentFkRootLogIdIsSet = true;
}
bool Log::commentFkRootLogIdIsSet() const
{
    return m_CommentFkRootLogIdIsSet;
}

void Log::unsetCommentFkRootLogId()
{
    m_CommentFkRootLogIdIsSet = false;
}

std::vector<utility::string_t>& Log::getRuns()
{
    return m_Runs;
}

void Log::setRuns(std::vector<utility::string_t> value)
{
    m_Runs = value;
    
}
}
}
}
}

