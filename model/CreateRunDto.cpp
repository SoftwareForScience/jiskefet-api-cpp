/**
 * Jiskefet
 * Running with /api base path
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CreateRunDto.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CreateRunDto::CreateRunDto()
{
    m_RunNumber = 0.0;
    m_O2StartTime = utility::datetime();
    m_TrgStartTime = utility::datetime();
    m_RunType = utility::conversions::to_string_t("");
    m_ActivityId = utility::conversions::to_string_t("");
    m_NDetectors = 0.0;
    m_NFlps = 0.0;
    m_NEpns = 0.0;
}

CreateRunDto::~CreateRunDto()
{
}

void CreateRunDto::validate()
{
    // TODO: implement validation
}

web::json::value CreateRunDto::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("runNumber")] = ModelBase::toJson(m_RunNumber);
    val[utility::conversions::to_string_t("O2StartTime")] = ModelBase::toJson(m_O2StartTime);
    val[utility::conversions::to_string_t("TrgStartTime")] = ModelBase::toJson(m_TrgStartTime);
    val[utility::conversions::to_string_t("runType")] = ModelBase::toJson(m_RunType);
    val[utility::conversions::to_string_t("activityId")] = ModelBase::toJson(m_ActivityId);
    val[utility::conversions::to_string_t("nDetectors")] = ModelBase::toJson(m_NDetectors);
    val[utility::conversions::to_string_t("nFlps")] = ModelBase::toJson(m_NFlps);
    val[utility::conversions::to_string_t("nEpns")] = ModelBase::toJson(m_NEpns);

    return val;
}

void CreateRunDto::fromJson(web::json::value& val)
{
    setRunNumber(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("runNumber")]));
    setO2StartTime
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("O2StartTime")]));
    setTrgStartTime
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("TrgStartTime")]));
    setRunType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("runType")]));
    setActivityId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("activityId")]));
    setNDetectors(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("nDetectors")]));
    setNFlps(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("nFlps")]));
    setNEpns(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("nEpns")]));
}

void CreateRunDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runNumber"), m_RunNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("O2StartTime"), m_O2StartTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("TrgStartTime"), m_TrgStartTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runType"), m_RunType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("activityId"), m_ActivityId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nDetectors"), m_NDetectors));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nFlps"), m_NFlps));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nEpns"), m_NEpns));
}

void CreateRunDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setRunNumber(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("runNumber"))));
    setO2StartTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("O2StartTime"))));
    setTrgStartTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("TrgStartTime"))));
    setRunType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("runType"))));
    setActivityId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("activityId"))));
    setNDetectors(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nDetectors"))));
    setNFlps(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nFlps"))));
    setNEpns(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nEpns"))));
}

double CreateRunDto::getRunNumber() const
{
    return m_RunNumber;
}


void CreateRunDto::setRunNumber(double value)
{
    m_RunNumber = value;
    
}
utility::datetime CreateRunDto::getO2StartTime() const
{
    return m_O2StartTime;
}


void CreateRunDto::setO2StartTime(utility::datetime value)
{
    m_O2StartTime = value;
    
}
utility::datetime CreateRunDto::getTrgStartTime() const
{
    return m_TrgStartTime;
}


void CreateRunDto::setTrgStartTime(utility::datetime value)
{
    m_TrgStartTime = value;
    
}
utility::string_t CreateRunDto::getRunType() const
{
    return m_RunType;
}


void CreateRunDto::setRunType(utility::string_t value)
{
    m_RunType = value;
    
}
utility::string_t CreateRunDto::getActivityId() const
{
    return m_ActivityId;
}


void CreateRunDto::setActivityId(utility::string_t value)
{
    m_ActivityId = value;
    
}
double CreateRunDto::getNDetectors() const
{
    return m_NDetectors;
}


void CreateRunDto::setNDetectors(double value)
{
    m_NDetectors = value;
    
}
double CreateRunDto::getNFlps() const
{
    return m_NFlps;
}


void CreateRunDto::setNFlps(double value)
{
    m_NFlps = value;
    
}
double CreateRunDto::getNEpns() const
{
    return m_NEpns;
}


void CreateRunDto::setNEpns(double value)
{
    m_NEpns = value;
    
}
}
}
}
}

