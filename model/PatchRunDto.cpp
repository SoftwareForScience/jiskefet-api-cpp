/**
 * Jiskefet
 * Running with /api base path
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PatchRunDto.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PatchRunDto::PatchRunDto()
{
    m_TrgEndTime = utility::datetime();
    m_O2EndTime = utility::datetime();
    m_RunQuality = utility::conversions::to_string_t("");
    m_NTimeframes = 0.0;
    m_NSubtimeframes = 0.0;
    m_BytesReadOut = 0.0;
    m_BytesTimeframeBuilder = 0.0;
}

PatchRunDto::~PatchRunDto()
{
}

void PatchRunDto::validate()
{
    // TODO: implement validation
}

web::json::value PatchRunDto::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("TrgEndTime")] = ModelBase::toJson(m_TrgEndTime);
    val[utility::conversions::to_string_t("O2EndTime")] = ModelBase::toJson(m_O2EndTime);
    val[utility::conversions::to_string_t("runQuality")] = ModelBase::toJson(m_RunQuality);
    val[utility::conversions::to_string_t("nTimeframes")] = ModelBase::toJson(m_NTimeframes);
    val[utility::conversions::to_string_t("nSubtimeframes")] = ModelBase::toJson(m_NSubtimeframes);
    val[utility::conversions::to_string_t("bytesReadOut")] = ModelBase::toJson(m_BytesReadOut);
    val[utility::conversions::to_string_t("bytesTimeframeBuilder")] = ModelBase::toJson(m_BytesTimeframeBuilder);

    return val;
}

void PatchRunDto::fromJson(web::json::value& val)
{
    setTrgEndTime
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("TrgEndTime")]));
    setO2EndTime
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("O2EndTime")]));
    setRunQuality(ModelBase::stringFromJson(val[utility::conversions::to_string_t("runQuality")]));
    setNTimeframes(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("nTimeframes")]));
    setNSubtimeframes(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("nSubtimeframes")]));
    setBytesReadOut(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("bytesReadOut")]));
    setBytesTimeframeBuilder(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("bytesTimeframeBuilder")]));
}

void PatchRunDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("TrgEndTime"), m_TrgEndTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("O2EndTime"), m_O2EndTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runQuality"), m_RunQuality));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nTimeframes"), m_NTimeframes));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nSubtimeframes"), m_NSubtimeframes));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bytesReadOut"), m_BytesReadOut));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bytesTimeframeBuilder"), m_BytesTimeframeBuilder));
}

void PatchRunDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setTrgEndTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("TrgEndTime"))));
    setO2EndTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("O2EndTime"))));
    setRunQuality(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("runQuality"))));
    setNTimeframes(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nTimeframes"))));
    setNSubtimeframes(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nSubtimeframes"))));
    setBytesReadOut(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bytesReadOut"))));
    setBytesTimeframeBuilder(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bytesTimeframeBuilder"))));
}

utility::datetime PatchRunDto::getTrgEndTime() const
{
    return m_TrgEndTime;
}


void PatchRunDto::setTrgEndTime(utility::datetime value)
{
    m_TrgEndTime = value;
    
}
utility::datetime PatchRunDto::getO2EndTime() const
{
    return m_O2EndTime;
}


void PatchRunDto::setO2EndTime(utility::datetime value)
{
    m_O2EndTime = value;
    
}
utility::string_t PatchRunDto::getRunQuality() const
{
    return m_RunQuality;
}


void PatchRunDto::setRunQuality(utility::string_t value)
{
    m_RunQuality = value;
    
}
double PatchRunDto::getNTimeframes() const
{
    return m_NTimeframes;
}


void PatchRunDto::setNTimeframes(double value)
{
    m_NTimeframes = value;
    
}
double PatchRunDto::getNSubtimeframes() const
{
    return m_NSubtimeframes;
}


void PatchRunDto::setNSubtimeframes(double value)
{
    m_NSubtimeframes = value;
    
}
double PatchRunDto::getBytesReadOut() const
{
    return m_BytesReadOut;
}


void PatchRunDto::setBytesReadOut(double value)
{
    m_BytesReadOut = value;
    
}
double PatchRunDto::getBytesTimeframeBuilder() const
{
    return m_BytesTimeframeBuilder;
}


void PatchRunDto::setBytesTimeframeBuilder(double value)
{
    m_BytesTimeframeBuilder = value;
    
}
}
}
}
}

