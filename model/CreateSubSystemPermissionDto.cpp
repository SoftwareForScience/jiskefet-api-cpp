/**
 * Jiskefet
 * Running with /api base path
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CreateSubSystemPermissionDto.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CreateSubSystemPermissionDto::CreateSubSystemPermissionDto()
{
    m_IsMember = false;
    m_EditEorReason = false;
    m_SubSystemHash = utility::conversions::to_string_t("");
    m_SubSystemTokenDescription = utility::conversions::to_string_t("");
}

CreateSubSystemPermissionDto::~CreateSubSystemPermissionDto()
{
}

void CreateSubSystemPermissionDto::validate()
{
    // TODO: implement validation
}

web::json::value CreateSubSystemPermissionDto::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    val[utility::conversions::to_string_t("subsystem")] = ModelBase::toJson(m_Subsystem);
    val[utility::conversions::to_string_t("isMember")] = ModelBase::toJson(m_IsMember);
    val[utility::conversions::to_string_t("editEorReason")] = ModelBase::toJson(m_EditEorReason);
    val[utility::conversions::to_string_t("subSystemHash")] = ModelBase::toJson(m_SubSystemHash);
    val[utility::conversions::to_string_t("subSystemTokenDescription")] = ModelBase::toJson(m_SubSystemTokenDescription);

    return val;
}

void CreateSubSystemPermissionDto::fromJson(web::json::value& val)
{
    std::shared_ptr<Object> newUser(nullptr);
    newUser->fromJson(val[utility::conversions::to_string_t("user")]);
    setUser( newUser );
    std::shared_ptr<Object> newSubsystem(nullptr);
    newSubsystem->fromJson(val[utility::conversions::to_string_t("subsystem")]);
    setSubsystem( newSubsystem );
    setIsMember(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isMember")]));
    setEditEorReason(ModelBase::boolFromJson(val[utility::conversions::to_string_t("editEorReason")]));
    setSubSystemHash(ModelBase::stringFromJson(val[utility::conversions::to_string_t("subSystemHash")]));
    setSubSystemTokenDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("subSystemTokenDescription")]));
}

void CreateSubSystemPermissionDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_User->toMultipart(multipart, utility::conversions::to_string_t("user."));
    m_Subsystem->toMultipart(multipart, utility::conversions::to_string_t("subsystem."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMember"), m_IsMember));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editEorReason"), m_EditEorReason));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subSystemHash"), m_SubSystemHash));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subSystemTokenDescription"), m_SubSystemTokenDescription));
}

void CreateSubSystemPermissionDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<Object> newUser(nullptr);
    newUser->fromMultiPart(multipart, utility::conversions::to_string_t("user."));
    setUser( newUser );
    std::shared_ptr<Object> newSubsystem(nullptr);
    newSubsystem->fromMultiPart(multipart, utility::conversions::to_string_t("subsystem."));
    setSubsystem( newSubsystem );
    setIsMember(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMember"))));
    setEditEorReason(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("editEorReason"))));
    setSubSystemHash(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("subSystemHash"))));
    setSubSystemTokenDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("subSystemTokenDescription"))));
}

std::shared_ptr<Object> CreateSubSystemPermissionDto::getUser() const
{
    return m_User;
}


void CreateSubSystemPermissionDto::setUser(std::shared_ptr<Object> value)
{
    m_User = value;
    
}
std::shared_ptr<Object> CreateSubSystemPermissionDto::getSubsystem() const
{
    return m_Subsystem;
}


void CreateSubSystemPermissionDto::setSubsystem(std::shared_ptr<Object> value)
{
    m_Subsystem = value;
    
}
bool CreateSubSystemPermissionDto::isIsMember() const
{
    return m_IsMember;
}


void CreateSubSystemPermissionDto::setIsMember(bool value)
{
    m_IsMember = value;
    
}
bool CreateSubSystemPermissionDto::isEditEorReason() const
{
    return m_EditEorReason;
}


void CreateSubSystemPermissionDto::setEditEorReason(bool value)
{
    m_EditEorReason = value;
    
}
utility::string_t CreateSubSystemPermissionDto::getSubSystemHash() const
{
    return m_SubSystemHash;
}


void CreateSubSystemPermissionDto::setSubSystemHash(utility::string_t value)
{
    m_SubSystemHash = value;
    
}
utility::string_t CreateSubSystemPermissionDto::getSubSystemTokenDescription() const
{
    return m_SubSystemTokenDescription;
}


void CreateSubSystemPermissionDto::setSubSystemTokenDescription(utility::string_t value)
{
    m_SubSystemTokenDescription = value;
    
}
}
}
}
}

